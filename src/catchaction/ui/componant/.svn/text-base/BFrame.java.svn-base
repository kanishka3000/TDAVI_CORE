/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewFrame.java
 *
 * Created on Nov 21, 2010, 10:42:11 AM
 */
package catchaction.ui.componant;

import catchaction.core.SoundComposer;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import catchaction.ui.componant.AudioComponant;

/**
 *
 * @author kanishka
 */
public class BFrame extends java.awt.Frame implements KeyListener {

    /** Creates new form NewFrame */
    private AudioComponant[][] componants = null;
    private int[] currentpossition;
    private SoundComposer composer;

    public BFrame(int rows, int colms) throws Exception {
        super();
        currentpossition = new int[2];//row,colomn
        currentpossition[0] = 0;
        currentpossition[1] = 0;
        setDimentions(rows, colms);
        this.addKeyListener(this);
        composer = new SoundComposer();
        // initComponents();
    }
    public int FrameBasicRiquirement = 0;
    public static int FRAMEREQUIREMENT_READY = 1;
    public static int FRAMEREQUIREMENT_DIMENTIONSNOTSET = 0;

    public void doEnter() {

    }

    public void doEscape() {
       
    }

    public void leaveResources() {
    }

    private void setDimentions(int rows, int colomns) throws Exception {
        //rows and colomns are 0 based;
        componants = new AudioComponant[rows][colomns];
        if (rows > 0 && colomns > 0) {
            this.FrameBasicRiquirement = BFrame.FRAMEREQUIREMENT_READY;
            System.out.println("ready");
        } else {
            throw new Exception("cant' be 0");
        }
    }

    public void add(AudioComponant componant, int row, int colomn) throws Exception {
        if (this.FrameBasicRiquirement != BFrame.FRAMEREQUIREMENT_READY) {
            throw new Exception("Frame dimentions are not set");
        }
        if (row > componants.length || colomn > componants[0].length) {
            throw new ArrayIndexOutOfBoundsException("rows or coloms are too large");
        }
        componants[row][colomn] = componant;
        // will this casting work?yes
        //componant.createWave();
        composer.addToSoundSources(componant.getAudioComp());
        this.add((Component) componant);
    }

    public void setVisible(boolean fa) {
        super.setVisible(fa);
        composer.loadSoundSources();
    }

    public void revalidateAudioPosition() {
        int totalrows = componants.length;
        int totaolcolms = componants[0].length;
        int halrow = (int) Math.floor(totalrows / 2);
        int halcol = (int) Math.floor(totaolcolms / 2);
        for (int currow = 0; currow < componants.length; currow++) {
            for (int curcol = 0; curcol < componants[currow].length; curcol++) {
                System.out.println(currow + "___" + curcol);
                // set the x and y of the actual componant. this method should be called once the componant placement changes
                AudioComponant compont = componants[currow][curcol];
                System.out.println(Double.toString(currow - halrow) + "---" + Double.toString(curcol - halcol));
                compont.setYP(currow - halrow);
                compont.setXP(curcol - halcol);
            }
        }
    }
    public AudioComponant getCurrentComponant(){
    return componants[currentpossition[0]][currentpossition[1]];
    }

    private void expressComponant() {
        System.out.println(componants[currentpossition[0]][currentpossition[1]].getXP() + ",,,," + componants[currentpossition[0]][currentpossition[1]].getYP());
        composer.play(componants[currentpossition[0]][currentpossition[1]].getAudioComp().SourceID);
        if (componants[currentpossition[0]][currentpossition[1]].isNeedForcus()) {
            componants[currentpossition[0]][currentpossition[1]].setFocus();
        } else {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new java.awt.GridLayout(1, 0));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
        System.out.println("key");
        if (KeyEvent.VK_LEFT == e.getKeyCode()) {
            System.out.println("left");
            if (currentpossition[1] > 0) {
                currentpossition[1]--;
                expressComponant();
            }
        } else if (KeyEvent.VK_RIGHT == e.getKeyCode()) {
            System.out.println("right");
            if (currentpossition[1] < componants[0].length - 1) {
                currentpossition[1]++;
                expressComponant();
            }
        } else if (KeyEvent.VK_DOWN == e.getKeyCode()) {
            if (currentpossition[0] > 0) {
                currentpossition[0]--;
                expressComponant();
            }
        } else if (KeyEvent.VK_UP == e.getKeyCode()) {
            if (currentpossition[0] < componants.length - 1) {
                currentpossition[0]++;
                expressComponant();
            }
        }else if(KeyEvent.VK_ENTER==e.getKeyCode()){
            doEnter();

        }else if (KeyEvent.VK_ESCAPE==e.getKeyCode()){
            doEscape();
        }
    }

    public void keyReleased(KeyEvent e) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
